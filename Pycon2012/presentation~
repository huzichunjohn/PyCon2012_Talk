Introduction

- Tell about your background
- Requirement for the talk (python, django, matplotlib, ajax ) and other third-party library. Due to the dependencies needed to set up the 

- what this talk is about ( we will be restricted to python, matplotlib and django)
  -show a simple but not trivial implementation of the concept. It is more of code sample (paste the github link)
- what this talk is not about (we are not trying to re-implement google analytics.)


Motivation for data visualization?
There is a need to represent the business analytic data in a graphical form. This because a picture speaks more than a thousand words. 

where do we find data?
show picture of the world (as a globe)

imformation is processed data. The major problem is how to make meaningful conclusions from the data.

Sources of data for this talk
*	csv
You may be working on some data in csv format.To get some inference about past data.
*	database
You may want to create some custom tables in your database which is set aside for analytics alone. This may be ideal for data that are created as snapshots.

Steps for data gathering
* identify the data source
* preprocessing of the data (removing nulls, wide characters. e.g. anything that would affect the processing of the data)
    *   google refine
* actual processing the real data (perform some statistical analysis)
* present the clean data in descriptive format. (present the cleaned data to the end user.)

Appendix 1

Visual Representation of data
* charts / diagram
* texts form
	tables
	log files

show picture examples of both

Categorization of data
	* real-time  (generating charts on real time. This can also include mechanism for refreshing the site to get the latest chart.)
    Appendix 2
	* batch-based ( create charts from csv file. Example in my blog)
    Appendix 2

Rules of data collection
* 	keep data in the easiest processible manner e.g saving data on real-time to a logfile  would be counter-inituitive as it can be saved directly to analytics table in your models.

*	keep data collected with timestamp. The timestamp could be the time the data was generated or when it was collected. This will enable specify filtering to give more meaning to the data. A rule of thumb is that creating a timestamp field in the data models is appropriate for many use case.

*	collect data that are relevant to the business needs (this is because computing is expensive. Only data that make business sense should be considered. However, in port-mortem analysis where there is maybe some losses within a period. We could create customized solution to fix the problem.)

* 	Ensure that whenever the data grows so large. You have to prun some stale or old data that are no longer needed. The most common way it is done in django is to delete some of the stale data using a periodic task.

*	Ensure that the data collected is secured as there may be a temptation to forget about his data. Ths kind of information is valuable to your competitors.


Where is the data visualization done?
* 	server
you may want to use python with matplotlib with some access control. This should be done when the information created are for some specific people. 
Some business analytic data are meant for managers alone and not for the whole customers. This may not scale as the entire processing is done by the server and rendered in the view to the user.

*	client
The ideal is to send json data to the client. 
list examples of javascript library
 DS.js
 gRaphael.js

*   factors to consider for choice of visualization
security
scalability

Tools needed for data analysis
csvkit
networkx (graphs)  spatial analysis
pySAL

Let the codes begin
let us see appendix

##############################################################################
####################### Appendix 1 ###############################
## This describes a scatter plot of solar radiation against the month. This aim to describe the steps of data gathering.

CSV file from data science hackathon website.

import csv
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure


def prepareList(month_most_common_list):
    ''' Prepare the input for process by removing all unneccessaty values. Replace "NA" with 0'''
    output_list = []
    for x in month_most_common_list:
        if x != 'NA':
            output_list.append(x)
        else:
            output_list.append(0)
    return output_list


def plotSolarRadiationAgainstMonth(filename):
    trainRowReader = csv.reader(open(filename, 'rb'), delimiter=',')
    month_most_common_list = []
    Solar_radiation_64_list = []
    for row in trainRowReader:
        month_most_common = row[3]
        Solar_radiation_64 = row[6]
        month_most_common_list.append(month_most_common)
        Solar_radiation_64_list.append(Solar_radiation_64)   
     
    #convert all elements in the list to float while skipping the first element for the 1st element is a description of the field.
    month_most_common_list = [float(i) for i in prepareList(month_most_common_list)[1:] ]
    Solar_radiation_64_list = [float(i) for i in prepareList(Solar_radiation_64_list)[1:] ]

    fig=Figure()
    ax=fig.add_subplot(111)
    title='Scatter Diagram of solar radiation against month of the year'
    ax.set_xlabel('Most common month')
    ax.set_ylabel('Solar Radiation')
    fig.suptitle(title, fontsize=14)
    try:
        ax.scatter(month_most_common_list, Solar_radiation_64_list)
        #it is possible to make other kind of plots e.g bar charts, pie charts, histogram
    except ValueError:
        pass
    canvas = FigureCanvas(fig)
    canvas.print_figure('solarRadMonth.png',dpi=500)


if __name__ == "__main__":
    plotSolarRadiationAgainstMonth('TrainingData.csv')


##############################################################################
####################### Appendix 2 ###############################
## In the WebMonitor project. The tasks.py is available in the root. It show how to fill the analytic tables. These tables can serve as a stream of data. This gives us the feature of real-time data processing.

from HTTPClass import HTTPClass

from WebMonitor.models import Monitor

from django.template import RequestContext, Context,  loader
from celery.task.schedules import crontab  
from celery.decorators import periodic_task 
from django.shortcuts import get_object_or_404
from WebMonitor import settings


class LoadEvent:	

    def __init__(self , xmlFileName = "config.xml"):
        self.myhttp = HTTPClass(xmlFileName) #create the HTTP  object
        self.monitorObjList = self.myhttp.checkedContent() #get complete response object

    def fillMonitorModel(self):
        for monObj in self.monitorObjList:
            mObj = Monitor(url = monObj[2], httpStatus = monObj[0], responseTime = monObj[1], contentStatus = monObj[5])
            mObj.save()

    def logEvents(self, filename = "logFolder/log.txt"):
        #save content of monitorObjList to a log file
        logfile = open(filename, 'a')      #append the file to prevent overwriting   
        for monObj in self.monitorObjList:
            #write to file in the order of url, httpStatus, responseTime, currrent time stamp , contentStatus
            wordString = "{0} | {1} | {2} | {3} | {4}\n".format(monObj[2], monObj[0], monObj[1], monObj[4],  self.__setyesNo(monObj[5]))
            logfile.write(wordString)
        logfile.close() 

    def __setyesNo(self, value):
        if value: 
            return 'Yes'
        else: 
            return 'No'

#also see the following examples in project named YAAS
tasks.py This shows how the analytic tables are loaded with real-time data.

##############################################################################
####################### Appendix 3 ###############################
## Example of visualizing real life data in form of scatter diagram

from django.http import HttpResponse
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
from YAAS.stats.models import RegisteredUser, OnlineUser, StatBid


#scatter diagram of number of bids made against number of online users
# weekly report
@staff_member_required
def weeklyScatterOnlinUsrBid(request, week_no):
    page_title='Weekly Scatter Diagram based on Online user verses Bid'
    weekno=week_no
    fig=Figure()
    ax=fig.add_subplot(111)
    year=stat.getYear()
    onlUserObj = OnlineUser.objects.filter(week=weekno).filter(year=year)
    bidObj = StatBid.objects.filter(week=weekno).filter(year=year)
    onlUserlist = list(onlUserObj.values_list('no_of_online_user', flat=True))
    bidlist = list(bidObj.values_list('no_of_bids', flat=True))
    title='Scatter Diagram of number of online User against number of bids (week {0}) {1}'.format(weekno,year)
    ax.set_xlabel('Number of online Users')
    ax.set_ylabel('Number of Bids')
    fig.suptitle(title, fontsize=14)
    try:
        ax.scatter(onlUserlist, bidlist)
    except ValueError:
        pass
    canvas = FigureCanvas(fig)
    response = HttpResponse(content_type='image/png')
    canvas.print_png(response)
    return response

more can be found in YAAS/graph/
The folder named "graph"
##############################################################################
####################### Appendix 4 ###############################
# example of how database may be deleted to recover some space
          
@periodic_task(run_every=crontab(hour=settings.HOUR, minute=settings.MINUTE, day_of_week=settings.DAY_OF_WEEK))  
def PerformCheck():
    event = LoadEvent()
    event.fillMonitorModel()
    event.logEvents()

##############################################################################
####################### Appendix 5 ###############################

check project in YAAS/stats/
for more on statistical processing

##############################################################################
####################### Appendix 6 ###############################
# how to refresh the views in django. aphs To keep the graphs updated.

{% extends "base.html" %}


{% block site_wrapper %}
    <div id="messages">Updating tables ...</div>

    <script>
    function refresh() {
        $.ajax({
            url: "/monitor/",
            success: function(data) {
                $('#messages').html(data);
            }
        });
        setInterval("refresh()", 100000);
    }

    $(function(){
        refresh();
    });
    </script>
{% endblock %}
